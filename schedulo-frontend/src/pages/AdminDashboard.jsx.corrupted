import React, { useState, useEffect } from 'react'
import Header from '../components/common/Header'
import CSVUploader from '../components/upload/CSVUploader'
import TimetableView from '../components/timetable/TimetableView'
import { 
  Upload, Calendar, Users, BookOpen, Building, 
  BarChart3, AlertCircle, CheckCircle, Settings
} from 'lucide-react'
import { useAuth } from '../context/AuthContext'
import api from '../services/api'
import toast from 'react-hot-toast'

const AdminDashboard = () => {
  const { user } = useAuth()
  const [activeTab, setActiveTab] = useState('overview')
  const [timetable, setTimetable] = useState([])
  const [generatedTimetable, setGeneratedTimetable] = useState(null)
  const [conflicts, setConflicts] = useState([])
  const [analytics, setAnalytics] = useState({
    students: 0,
    faculty: 0,
    courses: 0,
    rooms: 0
  })
  const [loading, setLoading] = useState(true)
  const [generating, setGenerating] = useState(false)

  useEffect(() => {
    fetchData()
  }, [])

  const fetchData = async () => {
    try {
      setLoading(true)
      
      const [analyticsRes, timetableRes, conflictsRes] = await Promise.all([
        api.get('/auth/admin/analytics'),
        api.get('/timetable/slots'),
        api.get('/timetable/conflicts')
      ])
      
      setAnalytics(analyticsRes.data || { students: 0, faculty: 0, courses: 0, rooms: 0 })
      setTimetable(timetableRes.data || [])
      setConflicts(conflictsRes.data || [])
      
    } catch (error) {
      console.error('Error fetching data:', error)
      toast.error('Failed to fetch data')
    } finally {
      setLoading(false)
    }
  }

  const handleGenerateTimetable = async () => {
    setGenerating(true)
    try {
      const response = await api.post("/timetable/generate", { semester: "Fall", year: 2025, name: "Main Schedule" })
      console.log("🎯 Generated timetable data:", response.data)
      setGeneratedTimetable(response.data)
      toast.success("Timetable generated successfully!")
      fetchData()
    } catch (error) {
      toast.error("Failed to generate timetable")
    } finally {
      setGenerating(false)
  }
    }

  const tabs = [
    { id: 'overview', name: 'Overview', icon: BarChart3 },
    { id: 'upload', name: 'Data Upload', icon: Upload },
    { id: 'timetable', name: 'Master Timetable', icon: Calendar },
    { id: 'conflicts', name: 'Conflicts', icon: AlertCircle }
  ]

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header title="Admin Dashboard" />
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header title="Admin Dashboard" />
      
      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Tab Navigation */}
        <div className="border-b border-gray-200 mb-8">
          <nav className="-mb-px flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  <span>{tab.name}</span>
                </button>
              )
            })}
          </nav>
        </div>

        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="card">
                <div className="flex items-center">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Users className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Students</p>
                    <p className="text-2xl font-bold text-gray-900">{analytics.students}</p>
                  </div>
                </div>
              </div>
              
              <div className="card">
                <div className="flex items-center">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <Users className="h-6 w-6 text-green-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Faculty</p>
                    <p className="text-2xl font-bold text-gray-900">{analytics.faculty}</p>
                  </div>
                </div>
              </div>
              
              <div className="card">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <BookOpen className="h-6 w-6 text-purple-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Courses</p>
                    <p className="text-2xl font-bold text-gray-900">{analytics.courses}</p>
                  </div>
                </div>
              </div>
              
              <div className="card">
                <div className="flex items-center">
                  <div className="p-2 bg-orange-100 rounded-lg">
                    <Building className="h-6 w-6 text-orange-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Rooms</p>
                    <p className="text-2xl font-bold text-gray-900">{analytics.rooms}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="card">
              <h3 className="text-lg font-medium mb-4">Quick Actions</h3>
              <div className="flex flex-wrap gap-4">
                <button
                  onClick={handleGenerateTimetable}
                  disabled={generating}
                  className="btn-primary"
                >
                  <Settings className="h-4 w-4 mr-2" />
                  {generating ? 'Generating...' : 'Generate Timetable'}
                </button>
                <button
                  onClick={() => setActiveTab('upload')}
                  className="btn-secondary"
                >
                  <Upload className="h-4 w-4 mr-2" />
                  Upload Data
                </button>
                <button
                  onClick={() => setActiveTab('conflicts')}
                  className="btn-secondary"
                >
                  <AlertCircle className="h-4 w-4 mr-2" />
                  View Conflicts ({conflicts.length})
                </button>
              </div>
            </div>
          </div>
        )}

                </div>

        {/* Generated Timetable Display */}
        {activeTab === 'overview' && generatedTimetable && (
          <div className="card">
            <h3 className="text-lg font-medium mb-4">Generated Weekly Timetable</h3>
            <div className="text-sm text-gray-600 mb-4">
              Generated: {new Date(generatedTimetable.generatedAt).toLocaleString()}
            </div>
            
            {/* Statistics */}
            {generatedTimetable.stats && (
              <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                <h4 className="font-medium mb-2">Weekly Schedule Overview</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <span>🏫 Total Classrooms: {generatedTimetable.stats.roomsUsed}</span>
                  <span>📅 Days per Week: 6</span>
                  <span>🕐 Lectures per Day: 7</span>
                  <span>👥 Total Students: {generatedTimetable.stats.totalStudents}</span>
                </div>
              </div>
            )}
            
            {/* Schedule Display */}
            <div className="grid gap-3 max-h-96 overflow-y-auto">
              {generatedTimetable.schedule?.slice(0, 20).map((slot) => (
                <div key={slot.id} className="border rounded-lg p-3">
                  <div className="flex justify-between items-start mb-2">
                    <h4 className="font-medium text-blue-600">{slot.course}</h4>
                    <span className="text-sm text-gray-500">{slot.day} {slot.timeSlot}</span>
                  </div>
                  <div className="text-sm text-gray-600">
                    <p>Faculty: {slot.faculty}</p>
                    <p>Room: {slot.room}</p>
                    <p>Students: {slot.students}</p>
                  </div>
                </div>
              ))}
            </div>
            
            {generatedTimetable.schedule?.length > 20 && (
              <div className="mt-4 text-center text-sm text-gray-500">
                Showing first 20 of {generatedTimetable.schedule.length} total time slots
              </div>
            )}
          </div>
        )}

        {/* Data Upload Tab */}
        {activeTab === 'upload' && (
          <div className="space-y-6">
            <div className="card">
              <h3 className="text-lg font-medium mb-6">Upload CSV Data</h3>
              <CSVUploader onUploadSuccess={handleUploadSuccess} />
            </div>
          </div>
        )}

        {/* Master Timetable Tab */}
        {activeTab === 'timetable' && (
          <div className="card">
            <h3 className="text-lg font-medium mb-6">Master Timetable</h3>
            <TimetableView data={timetable} view="week" />
          </div>
        )}

        {/* Conflicts Tab */}
        {activeTab === 'conflicts' && (
          <div className="space-y-6">
            <div className="card">
              <h3 className="text-lg font-medium mb-6">Scheduling Conflicts</h3>
              {conflicts.length === 0 ? (
                <p className="text-gray-500">No conflicts detected</p>
              ) : (
                <div className="space-y-4">
                  {conflicts.map((conflict) => (
                    <div key={conflict.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="font-medium text-red-600">{conflict.type}</h4>
                        <span className="text-sm text-gray-500">{conflict.severity}</span>
                      </div>
                      <p className="text-sm text-gray-600 mb-3">{conflict.description}</p>
                      <button
                        onClick={() => handleResolveConflict(conflict.id, { action: 'auto-resolve' })}
                        className="btn-primary text-sm"
                      >
                        Auto Resolve
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </main>
  )
}

export default AdminDashboard
